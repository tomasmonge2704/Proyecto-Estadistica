{"ast":null,"code":"import _toConsumableArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { useMemo as $1OoTj$useMemo, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\n\nvar $05ca4cd7c4a5a999$export$863faf230ee2118a = /*#__PURE__*/function () {\n  function $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        expandedKeys = _ref.expandedKeys;\n\n    _classCallCheck(this, $05ca4cd7c4a5a999$export$863faf230ee2118a);\n\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    var visit = function visit(node) {\n      _this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        var _iterator = _createForOfIteratorHelper(node.childNodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            visit(child);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    };\n\n    var _iterator2 = _createForOfIteratorHelper(nodes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var node2 = _step2.value;\n        visit(node2);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var last;\n    var index = 0;\n\n    var _iterator3 = _createForOfIteratorHelper(this.keyMap),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            key = _step3$value[0],\n            node1 = _step3$value[1];\n\n        if (last) {\n          last.nextKey = key;\n          node1.prevKey = last.key;\n        } else {\n          this.firstKey = key;\n          node1.prevKey = undefined;\n        }\n\n        if (node1.type === 'item') node1.index = index++;\n        last = node1; // Set nextKey as undefined since this might be the last node\n        // If it isn't the last node, last.nextKey will properly set at start of new loop\n\n        last.nextKey = undefined;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n  _createClass($05ca4cd7c4a5a999$export$863faf230ee2118a, [{\n    key: tmp,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.iterable, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keyMap.size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      return this.firstKey;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      return this.lastKey;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $05ca4cd7c4a5a999$export$863faf230ee2118a;\n}();\n\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  var _$1OoTj$useControlled = $1OoTj$useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange),\n      _$1OoTj$useControlled2 = _slicedToArray(_$1OoTj$useControlled, 2),\n      expandedKeys = _$1OoTj$useControlled2[0],\n      setExpandedKeys = _$1OoTj$useControlled2[1];\n\n  var selectionState = $1OoTj$useMultipleSelectionState(props);\n  var disabledKeys = $1OoTj$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var tree = $1OoTj$useCollection(props, function (nodes) {\n    return new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {\n      expandedKeys: expandedKeys\n    });\n  }, null, [expandedKeys]); // Reset focused key if that item is deleted from the collection.\n\n  $1OoTj$useEffect(function () {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new $1OoTj$SelectionManager(tree, selectionState)\n  };\n}\n\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  var res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\n\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"mappings":"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","names":["Symbol","iterator","$05ca4cd7c4a5a999$export$863faf230ee2118a","nodes","expandedKeys","keyMap","Map","iterable","Set","visit","node","set","key","childNodes","type","has","child","node2","last","index","node1","nextKey","prevKey","firstKey","undefined","lastKey","size","keys","get","idx","getKeys","getItem","$875d6693e12af071$export$728d6ba534403756","props","$1OoTj$useControlledState","defaultExpandedKeys","onExpandedChange","setExpandedKeys","selectionState","$1OoTj$useMultipleSelectionState","disabledKeys","$1OoTj$useMemo","tree","$1OoTj$useCollection","$1OoTj$useEffect","focusedKey","setFocusedKey","onToggle","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$1OoTj$SelectionManager","res","delete","add"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/TreeCollection.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/useTreeState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}