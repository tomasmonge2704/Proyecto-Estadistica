{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useReducer as $d70Aq$useReducer, useEffect as $d70Aq$useEffect, useState as $d70Aq$useState, useMemo as $d70Aq$useMemo } from \"react\";\n\nfunction $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {\n  var _options$initialItems = options.initialItems,\n      initialItems = _options$initialItems === void 0 ? [] : _options$initialItems,\n      initialSelectedKeys = options.initialSelectedKeys,\n      _options$getKey = options.getKey,\n      getKey = _options$getKey === void 0 ? function (item) {\n    return item.id || item.key;\n  } : _options$getKey,\n      filter = options.filter,\n      _options$initialFilte = options.initialFilterText,\n      initialFilterText = _options$initialFilte === void 0 ? '' : _options$initialFilte; // Store both items and filteredItems in state so we can go back to the unfiltered list\n\n  var _$d70Aq$useState = $d70Aq$useState({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  }),\n      _$d70Aq$useState2 = _slicedToArray(_$d70Aq$useState, 2),\n      state = _$d70Aq$useState2[0],\n      setState = _$d70Aq$useState2[1];\n\n  var filteredItems = $d70Aq$useMemo(function () {\n    return filter ? state.items.filter(function (item) {\n      return filter(item, state.filterText);\n    }) : state.items;\n  }, [state.items, state.filterText, filter]);\n  return _objectSpread(_objectSpread(_objectSpread({}, state), {}, {\n    items: filteredItems\n  }, $0d86e9c8f07f9a7b$export$79c0c687a5963b0a({\n    getKey: getKey\n  }, setState)), {}, {\n    getItem: function getItem(key) {\n      return state.items.find(function (item) {\n        return getKey(item) === key;\n      });\n    }\n  });\n}\n\nfunction $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {\n  var cursor = opts.cursor,\n      getKey = opts.getKey;\n  return {\n    setSelectedKeys: function setSelectedKeys(selectedKeys) {\n      dispatch(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedKeys: selectedKeys\n        });\n      });\n    },\n    setFilterText: function setFilterText(filterText) {\n      dispatch(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          filterText: filterText\n        });\n      });\n    },\n    insert: function insert(index) {\n      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n      }\n\n      dispatch(function (state) {\n        return $0d86e9c8f07f9a7b$var$insert.apply(void 0, [state, index].concat(values));\n      });\n    },\n    insertBefore: function insertBefore(key) {\n      for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        values[_key2 - 1] = arguments[_key2];\n      }\n\n      dispatch(function (state) {\n        var index = state.items.findIndex(function (item) {\n          return getKey(item) === key;\n        });\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert.apply(void 0, [state, index].concat(values));\n      });\n    },\n    insertAfter: function insertAfter(key) {\n      for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        values[_key3 - 1] = arguments[_key3];\n      }\n\n      dispatch(function (state) {\n        var index = state.items.findIndex(function (item) {\n          return getKey(item) === key;\n        });\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert.apply(void 0, [state, index + 1].concat(values));\n      });\n    },\n    prepend: function prepend() {\n      for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        values[_key4] = arguments[_key4];\n      }\n\n      dispatch(function (state) {\n        return $0d86e9c8f07f9a7b$var$insert.apply(void 0, [state, 0].concat(values));\n      });\n    },\n    append: function append() {\n      for (var _len5 = arguments.length, values = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        values[_key5] = arguments[_key5];\n      }\n\n      dispatch(function (state) {\n        return $0d86e9c8f07f9a7b$var$insert.apply(void 0, [state, state.items.length].concat(values));\n      });\n    },\n    remove: function remove() {\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      dispatch(function (state) {\n        var keySet = new Set(keys);\n        var items = state.items.filter(function (item) {\n          return !keySet.has(getKey(item));\n        });\n        var selection = 'all';\n\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n\n          var _iterator = _createForOfIteratorHelper(keys),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var key = _step.value;\n              selection.delete(key);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        if (cursor == null && items.length === 0) selection = new Set();\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: items,\n          selectedKeys: selection\n        });\n      });\n    },\n    removeSelectedItems: function removeSelectedItems() {\n      dispatch(function (state) {\n        if (state.selectedKeys === 'all') return _objectSpread(_objectSpread({}, state), {}, {\n          items: [],\n          selectedKeys: new Set()\n        });\n        var selectedKeys = state.selectedKeys;\n        var items = state.items.filter(function (item) {\n          return !selectedKeys.has(getKey(item));\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: items,\n          selectedKeys: new Set()\n        });\n      });\n    },\n    move: function move(key, toIndex) {\n      dispatch(function (state) {\n        var index = state.items.findIndex(function (item) {\n          return getKey(item) === key;\n        });\n        if (index === -1) return state;\n        var copy = state.items.slice();\n\n        var _copy$splice = copy.splice(index, 1),\n            _copy$splice2 = _slicedToArray(_copy$splice, 1),\n            item1 = _copy$splice2[0];\n\n        copy.splice(toIndex, 0, item1);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: copy\n        });\n      });\n    },\n    moveBefore: function moveBefore(key1, keys) {\n      dispatch(function (state) {\n        var toIndex = state.items.findIndex(function (item) {\n          return getKey(item) === key1;\n        });\n        if (toIndex === -1) return state; // Find indices of keys to move. Sort them so that the order in the list is retained.\n\n        var indices = keys.map(function (key) {\n          return state.items.findIndex(function (item) {\n            return getKey(item) === key;\n          });\n        }).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);\n      });\n    },\n    moveAfter: function moveAfter(key2, keys) {\n      dispatch(function (state) {\n        var toIndex = state.items.findIndex(function (item) {\n          return getKey(item) === key2;\n        });\n        if (toIndex === -1) return state;\n        var indices = keys.map(function (key) {\n          return state.items.findIndex(function (item) {\n            return getKey(item) === key;\n          });\n        }).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);\n      });\n    },\n    update: function update(key, newValue) {\n      dispatch(function (state) {\n        var index = state.items.findIndex(function (item) {\n          return getKey(item) === key;\n        });\n        if (index === -1) return state;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: [].concat(_toConsumableArray(state.items.slice(0, index)), [newValue], _toConsumableArray(state.items.slice(index + 1)))\n        });\n      });\n    }\n  };\n}\n\nfunction $0d86e9c8f07f9a7b$var$insert(state, index) {\n  for (var _len7 = arguments.length, values = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n    values[_key7 - 2] = arguments[_key7];\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: [].concat(_toConsumableArray(state.items.slice(0, index)), values, _toConsumableArray(state.items.slice(index)))\n  });\n}\n\nfunction $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {\n  // Shift the target down by the number of items being moved from before the target\n  var _iterator2 = _createForOfIteratorHelper(indices),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      if (index < toIndex) toIndex--;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var moves = indices.map(function (from) {\n    return {\n      from: from,\n      to: toIndex++\n    };\n  }); // Shift later from indices down if they have a larger index\n\n  for (var i = 0; i < moves.length; i++) {\n    var a = moves[i].from;\n\n    for (var j = i; j < moves.length; j++) {\n      var b = moves[j].from;\n      if (b > a) moves[j].from--;\n    }\n  } // Interleave the moves so they can be applied one by one rather than all at once\n\n\n  for (var i1 = 0; i1 < moves.length; i1++) {\n    var _a = moves[i1];\n\n    for (var _j = moves.length - 1; _j > i1; _j--) {\n      var _b = moves[_j];\n      if (_b.from < _a.to) _a.to++;else _b.from++;\n    }\n  }\n\n  var copy = state.items.slice();\n\n  var _iterator3 = _createForOfIteratorHelper(moves),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var move = _step3.value;\n\n      var _copy$splice3 = copy.splice(move.from, 1),\n          _copy$splice4 = _slicedToArray(_copy$splice3, 1),\n          item = _copy$splice4[0];\n\n      copy.splice(move.to, 0, item);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: copy\n  });\n}\n\nfunction $f86e6c1ec7da6ebb$var$reducer(data, action) {\n  var selectedKeys;\n\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          var _filterText, _sortDescriptor;\n\n          return _objectSpread(_objectSpread({}, data), {}, {\n            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n            abortController: action.abortController\n          });\n\n        case 'update':\n          return _objectSpread(_objectSpread({}, data), action.updater(data));\n\n        case 'success':\n        case 'error':\n          return data;\n\n        default:\n          throw new Error(\"Invalid action \\\"\".concat(action.type, \"\\\" in state \\\"\").concat(data.state, \"\\\"\"));\n      }\n\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) return data;\n\n          var _selectedKeys;\n\n          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;\n\n          var _filterText1, _sortDescriptor1;\n\n          return _objectSpread(_objectSpread({}, data), {}, {\n            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,\n            state: 'idle',\n            items: _toConsumableArray(action.items),\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          });\n\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return _objectSpread(_objectSpread({}, data), {}, {\n            state: 'error',\n            error: action.error,\n            abortController: null\n          });\n\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n\n          var _filterText2;\n\n          return _objectSpread(_objectSpread({}, data), {}, {\n            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          });\n\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return _objectSpread(_objectSpread({}, data), action.updater(data));\n\n        default:\n          throw new Error(\"Invalid action \\\"\".concat(action.type, \"\\\" in state \\\"\").concat(data.state, \"\\\"\"));\n      }\n\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          var _selectedKeys1;\n\n          selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([].concat(_toConsumableArray(data.selectedKeys), _toConsumableArray((_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : [])));\n\n          var _sortDescriptor2; // Append the new items\n\n\n          return _objectSpread(_objectSpread({}, data), {}, {\n            state: 'idle',\n            items: [].concat(_toConsumableArray(data.items), _toConsumableArray(action.items)),\n            selectedKeys: selectedKeys,\n            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          });\n\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return _objectSpread(_objectSpread({}, data), {}, {\n            state: 'error',\n            error: action.error\n          });\n\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n\n          var _filterText3;\n\n          return _objectSpread(_objectSpread({}, data), {}, {\n            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          });\n\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n          return data;\n\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return _objectSpread(_objectSpread({}, data), action.updater(data));\n\n        default:\n          throw new Error(\"Invalid action \\\"\".concat(action.type, \"\\\" in state \\\"\").concat(data.state, \"\\\"\"));\n      }\n\n    default:\n      throw new Error(\"Invalid state \\\"\".concat(data.state, \"\\\"\"));\n  }\n}\n\nfunction $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {\n  var load = options.load,\n      _sort = options.sort,\n      initialSelectedKeys = options.initialSelectedKeys,\n      initialSortDescriptor = options.initialSortDescriptor,\n      _options$getKey2 = options.getKey,\n      getKey = _options$getKey2 === void 0 ? function (item) {\n    return item.id || item.key;\n  } : _options$getKey2,\n      _options$initialFilte2 = options.initialFilterText,\n      initialFilterText = _options$initialFilte2 === void 0 ? '' : _options$initialFilte2;\n\n  var _$d70Aq$useReducer = $d70Aq$useReducer($f86e6c1ec7da6ebb$var$reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  }),\n      _$d70Aq$useReducer2 = _slicedToArray(_$d70Aq$useReducer, 2),\n      data = _$d70Aq$useReducer2[0],\n      dispatch = _$d70Aq$useReducer2[1];\n\n  var dispatchFetch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(action, fn) {\n      var abortController, _filterText, previousFilterText, _sortDescriptor, response, _filterText4, filterText;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              abortController = new AbortController();\n              _context.prev = 1;\n              dispatch(_objectSpread(_objectSpread({}, action), {}, {\n                abortController: abortController\n              }));\n              previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;\n              _context.next = 6;\n              return fn({\n                items: data.items.slice(),\n                selectedKeys: data.selectedKeys,\n                sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n                signal: abortController.signal,\n                cursor: action.type === 'loadingMore' ? data.cursor : null,\n                filterText: previousFilterText\n              });\n\n            case 6:\n              response = _context.sent;\n              filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;\n              dispatch(_objectSpread(_objectSpread({\n                type: 'success'\n              }, response), {}, {\n                abortController: abortController\n              })); // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n              // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n\n              if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({\n                type: 'filtering',\n                filterText: filterText\n              }, load);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch({\n                type: 'error',\n                error: _context.t0,\n                abortController: abortController\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function dispatchFetch(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  $d70Aq$useEffect(function () {\n    dispatchFetch({\n      type: 'loading'\n    }, load); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return _objectSpread(_objectSpread({\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n    getItem: function getItem(key) {\n      return data.items.find(function (item) {\n        return getKey(item) === key;\n      });\n    },\n    reload: function reload() {\n      dispatchFetch({\n        type: 'loading'\n      }, load);\n    },\n    loadMore: function loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;\n      dispatchFetch({\n        type: 'loadingMore'\n      }, load);\n    },\n    sort: function sort(sortDescriptor) {\n      dispatchFetch({\n        type: 'sorting',\n        sortDescriptor: sortDescriptor\n      }, _sort || load);\n    }\n  }, $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(_objectSpread(_objectSpread({}, options), {}, {\n    getKey: getKey,\n    cursor: data.cursor\n  }), function (fn) {\n    dispatch({\n      type: 'update',\n      updater: fn\n    });\n  })), {}, {\n    setFilterText: function setFilterText(filterText) {\n      dispatchFetch({\n        type: 'filtering',\n        filterText: filterText\n      }, load);\n    }\n  });\n}\n\nfunction $be2ea0343af54212$export$d14e1352e21f4a16(options) {\n  var _options$initialItems2 = options.initialItems,\n      initialItems1 = _options$initialItems2 === void 0 ? [] : _options$initialItems2,\n      initialSelectedKeys = options.initialSelectedKeys,\n      _options$getKey3 = options.getKey,\n      getKey = _options$getKey3 === void 0 ? function (item) {\n    return item.id || item.key;\n  } : _options$getKey3,\n      _options$getChildren = options.getChildren,\n      getChildren = _options$getChildren === void 0 ? function (item) {\n    return item.children;\n  } : _options$getChildren;\n  var map = $d70Aq$useMemo(function () {\n    return new Map();\n  }, []); // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var initialNodes = $d70Aq$useMemo(function () {\n    return buildTree(initialItems1);\n  }, []);\n\n  var _$d70Aq$useState3 = $d70Aq$useState(initialNodes),\n      _$d70Aq$useState4 = _slicedToArray(_$d70Aq$useState3, 2),\n      items1 = _$d70Aq$useState4[0],\n      setItems = _$d70Aq$useState4[1];\n\n  var _$d70Aq$useState5 = $d70Aq$useState(new Set(initialSelectedKeys || [])),\n      _$d70Aq$useState6 = _slicedToArray(_$d70Aq$useState5, 2),\n      selectedKeys = _$d70Aq$useState6[0],\n      setSelectedKeys = _$d70Aq$useState6[1];\n\n  function buildTree() {\n    var initialItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var parentKey = arguments.length > 1 ? arguments[1] : undefined;\n    return initialItems.map(function (item) {\n      var node = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items, key, update) {\n    var node = map.get(key);\n    if (!node) return items; // Create a new node. If null, then delete the node, otherwise replace.\n\n    var newNode = update(node);\n    if (newNode == null) deleteNode(node);else addNode(newNode); // Walk up the tree and update each parent to refer to the new chilren.\n\n    while (node.parentKey) {\n      var nextParent = map.get(node.parentKey);\n      var copy = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n      var children = nextParent.children;\n      if (newNode == null) children = children.filter(function (c) {\n        return c !== node;\n      });\n      copy.children = children.map(function (child) {\n        if (child === node) return newNode;\n        return child;\n      });\n      map.set(copy.key, copy);\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) items = items.filter(function (c) {\n      return c !== node;\n    });\n    return items.map(function (item) {\n      if (item === node) return newNode;\n      return item;\n    });\n  }\n\n  function addNode(node) {\n    map.set(node.key, node);\n\n    var _iterator4 = _createForOfIteratorHelper(node.children),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var child = _step4.value;\n        addNode(child);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  function deleteNode(node) {\n    map.delete(node.key);\n\n    var _iterator5 = _createForOfIteratorHelper(node.children),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var child = _step5.value;\n        deleteNode(child);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  }\n\n  return {\n    items: items1,\n    selectedKeys: selectedKeys,\n    setSelectedKeys: setSelectedKeys,\n    getItem: function getItem(key) {\n      return map.get(key);\n    },\n    insert: function insert(parentKey, index) {\n      for (var _len8 = arguments.length, values = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n        values[_key8 - 2] = arguments[_key8];\n      }\n\n      setItems(function (items) {\n        var nodes = buildTree(values, parentKey); // If parentKey is null, insert into the root.\n\n        if (parentKey == null) return [].concat(_toConsumableArray(items.slice(0, index)), _toConsumableArray(nodes), _toConsumableArray(items.slice(index))); // Otherwise, update the parent node and its ancestors.\n\n        return updateTree(items, parentKey, function (parentNode) {\n          return {\n            key: parentNode.key,\n            parentKey: parentNode.parentKey,\n            value: parentNode.value,\n            children: [].concat(_toConsumableArray(parentNode.children.slice(0, index)), _toConsumableArray(nodes), _toConsumableArray(parentNode.children.slice(index)))\n          };\n        });\n      });\n    },\n    insertBefore: function insertBefore(key) {\n      var node = map.get(key);\n      if (!node) return;\n      var parentNode = map.get(node.parentKey);\n      var nodes = parentNode ? parentNode.children : items1;\n      var index = nodes.indexOf(node);\n\n      for (var _len9 = arguments.length, values = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n        values[_key9 - 1] = arguments[_key9];\n      }\n\n      this.insert.apply(this, [parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index].concat(values));\n    },\n    insertAfter: function insertAfter(key) {\n      var node = map.get(key);\n      if (!node) return;\n      var parentNode = map.get(node.parentKey);\n      var nodes = parentNode ? parentNode.children : items1;\n      var index = nodes.indexOf(node);\n\n      for (var _len10 = arguments.length, values = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        values[_key10 - 1] = arguments[_key10];\n      }\n\n      this.insert.apply(this, [parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1].concat(values));\n    },\n    prepend: function prepend(parentKey) {\n      for (var _len11 = arguments.length, values = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n        values[_key11 - 1] = arguments[_key11];\n      }\n\n      this.insert.apply(this, [parentKey, 0].concat(values));\n    },\n    append: function append(parentKey) {\n      for (var _len12 = arguments.length, values = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n        values[_key12 - 1] = arguments[_key12];\n      }\n\n      if (parentKey == null) this.insert.apply(this, [null, items1.length].concat(values));else {\n        var parentNode = map.get(parentKey);\n        if (!parentNode) return;\n        this.insert.apply(this, [parentKey, parentNode.children.length].concat(values));\n      }\n    },\n    remove: function remove() {\n      var newItems = items1;\n\n      for (var _len13 = arguments.length, keys = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        keys[_key13] = arguments[_key13];\n      }\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        newItems = updateTree(newItems, key, function () {\n          return null;\n        });\n      }\n\n      setItems(newItems);\n      var selection = new Set(selectedKeys);\n\n      var _iterator6 = _createForOfIteratorHelper(selectedKeys),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key1 = _step6.value;\n          if (!map.has(key1)) selection.delete(key1);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems: function removeSelectedItems() {\n      this.remove.apply(this, _toConsumableArray(selectedKeys));\n    },\n    move: function move(key, toParentKey, index) {\n      setItems(function (items) {\n        var node = map.get(key);\n        if (!node) return items;\n        items = updateTree(items, key, function () {\n          return null;\n        });\n\n        var movedNode = _objectSpread(_objectSpread({}, node), {}, {\n          parentKey: toParentKey\n        });\n\n        return updateTree(items, toParentKey, function (parentNode) {\n          return {\n            key: parentNode.key,\n            parentKey: parentNode.parentKey,\n            value: parentNode.value,\n            children: [].concat(_toConsumableArray(parentNode.children.slice(0, index)), [movedNode], _toConsumableArray(parentNode.children.slice(index)))\n          };\n        });\n      });\n    },\n    update: function update(oldKey, newValue) {\n      setItems(function (items) {\n        return updateTree(items, oldKey, function (oldNode) {\n          var node = {\n            key: oldNode.key,\n            parentKey: oldNode.parentKey,\n            value: newValue,\n            children: null\n          };\n          node.children = buildTree(getChildren(newValue), node.key);\n          return node;\n        });\n      });\n    }\n  };\n}\n\nexport { $f86e6c1ec7da6ebb$export$bc3384a35de93d66 as useAsyncList, $be2ea0343af54212$export$d14e1352e21f4a16 as useTreeData, $0d86e9c8f07f9a7b$export$762f73dccccd255d as useListData };","map":{"version":3,"mappings":"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","names":["$0d86e9c8f07f9a7b$export$762f73dccccd255d","options","initialItems","initialSelectedKeys","getKey","item","id","key","filter","initialFilterText","$d70Aq$useState","items","selectedKeys","Set","filterText","state","setState","filteredItems","$d70Aq$useMemo","$0d86e9c8f07f9a7b$export$79c0c687a5963b0a","getItem","find","opts","dispatch","cursor","setSelectedKeys","setFilterText","insert","index","values","$0d86e9c8f07f9a7b$var$insert","insertBefore","findIndex","insertAfter","prepend","append","length","remove","keys","keySet","has","selection","delete","removeSelectedItems","move","toIndex","copy","slice","splice","item1","moveBefore","key1","indices","map","sort","$0d86e9c8f07f9a7b$var$move","moveAfter","key2","update","newValue","moves","from","to","i","a","j","b","i1","$f86e6c1ec7da6ebb$var$reducer","data","action","type","_filterText","_sortDescriptor","sortDescriptor","abortController","updater","Error","_selectedKeys","_filterText1","_sortDescriptor1","error","abort","_filterText2","_selectedKeys1","_sortDescriptor2","_filterText3","$f86e6c1ec7da6ebb$export$bc3384a35de93d66","load","initialSortDescriptor","$d70Aq$useReducer","dispatchFetch","fn","AbortController","previousFilterText","signal","response","_filterText4","aborted","$d70Aq$useEffect","isLoading","loadingState","reload","loadMore","$be2ea0343af54212$export$d14e1352e21f4a16","initialItems1","getChildren","children","Map","initialNodes","buildTree","items1","setItems","parentKey","node","value","set","updateTree","get","newNode","deleteNode","addNode","nextParent","c","child","nodes","parentNode","indexOf","newItems","toParentKey","movedNode","oldKey","oldNode"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/data/dist/packages/@react-stately/data/src/useListData.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/data/dist/packages/@react-stately/data/src/useAsyncList.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/data/dist/packages/@react-stately/data/src/useTreeData.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\nimport {Selection} from '@react-types/shared';\n\nexport interface ListOptions<T> {\n  /** Initial items in the list. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: 'all' | Iterable<Key>,\n  /** The initial text to filter the list by. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns whether a item matches the current filter text. */\n  filter?: (item: T, filterText: string) => boolean\n}\n\nexport interface ListData<T> {\n  /** The items in the list. */\n  items: T[],\n\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Selection): void,\n\n  /** The current filter text. */\n  filterText: string,\n\n  /** Sets the filter text. */\n  setFilterText(filterText: string): void,\n\n  /**\n   * Gets an item from the list by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): T,\n\n  /**\n   * Inserts items into the list at the given index.\n   * @param index - The index to insert into.\n   * @param values - The values to insert.\n   */\n  insert(index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends items to the list.\n   * @param values - The values to insert.\n   */\n  append(...values: T[]): void,\n\n  /**\n   * Prepends items to the list.\n   * @param value - The value to insert.\n   */\n  prepend(...values: T[]): void,\n\n  /**\n   * Removes items from the list by their keys.\n   * @param keys - The keys of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the list that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the list.\n   * @param key - The key of the item to move.\n   * @param toIndex - The index to move the item to.\n   */\n  move(key: Key, toIndex: number): void,\n\n  /**\n   * Moves one or more items before a given key.\n   * @param key - The key of the item to move the items before.\n   * @param keys - The keys of the items to move.\n   */\n  moveBefore(key: Key, keys: Key[]): void,\n\n  /**\n   * Moves one or more items after a given key.\n   * @param key - The key of the item to move the items after.\n   * @param keys - The keys of the items to move.\n   */\n  moveAfter(key: Key, keys: Key[]): void,\n\n  /**\n   * Updates an item in the list.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\nexport interface ListState<T> {\n  items: T[],\n  selectedKeys: Selection,\n  filterText: string\n}\n\ninterface CreateListOptions<T, C> extends ListOptions<T> {\n  cursor?: C\n}\n\n/**\n * Manages state for an immutable list data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useListData<T>(options: ListOptions<T>): ListData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    filter,\n    initialFilterText = ''\n  } = options;\n\n  // Store both items and filteredItems in state so we can go back to the unfiltered list\n  let [state, setState] = useState<ListState<T>>({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  });\n\n  let filteredItems = useMemo(\n    () => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items,\n    [state.items, state.filterText, filter]);\n\n  return {\n    ...state,\n    items: filteredItems,\n    ...createListActions({getKey}, setState),\n    getItem(key: Key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n  };\n}\n\nexport function createListActions<T, C>(opts: CreateListOptions<T, C>, dispatch: (updater: (state: ListState<T>) => ListState<T>) => void): Omit<ListData<T>, 'items' | 'selectedKeys' | 'getItem' | 'filterText'> {\n  let {cursor, getKey} = opts;\n  return {\n    setSelectedKeys(selectedKeys: Selection) {\n      dispatch(state => ({\n        ...state,\n        selectedKeys\n      }));\n    },\n    setFilterText(filterText: string) {\n      dispatch(state => ({\n        ...state,\n        filterText\n      }));\n    },\n    insert(index: number, ...values: T[]) {\n      dispatch(state => insert(state, index, ...values));\n    },\n    insertBefore(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index, ...values);\n      });\n    },\n    insertAfter(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index + 1, ...values);\n      });\n    },\n    prepend(...values: T[]) {\n      dispatch(state => insert(state, 0, ...values));\n    },\n    append(...values: T[]) {\n      dispatch(state => insert(state, state.items.length, ...values));\n    },\n    remove(...keys: Key[]) {\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n\n        let selection: Selection = 'all';\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n          for (let key of keys) {\n            selection.delete(key);\n          }\n        }\n        if (cursor == null && items.length === 0) {\n          selection = new Set();\n        }\n\n        return {\n          ...state,\n          items,\n          selectedKeys: selection\n        };\n      });\n    },\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') {\n          return {\n            ...state,\n            items: [],\n            selectedKeys: new Set()\n          };\n        }\n\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return {\n          ...state,\n          items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n    move(key: Key, toIndex: number) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        let copy = state.items.slice();\n        let [item] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item);\n        return {\n          ...state,\n          items: copy\n        };\n      });\n    },\n    moveBefore(key: Key, keys: Key[]) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        // Find indices of keys to move. Sort them so that the order in the list is retained.\n        let indices = keys.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex);\n      });\n    },\n    moveAfter(key: Key, keys: Key[]) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        let indices = keys.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex + 1);\n      });\n    },\n    update(key: Key, newValue: T) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            newValue,\n            ...state.items.slice(index + 1)\n          ]\n        };\n      });\n    }\n  };\n}\n\nfunction insert<T>(state: ListState<T>, index: number, ...values: T[]): ListState<T> {\n  return {\n    ...state,\n    items: [\n      ...state.items.slice(0, index),\n      ...values,\n      ...state.items.slice(index)\n    ]\n  };\n}\n\nfunction move<T>(state: ListState<T>, indices: number[], toIndex: number): ListState<T> {\n  // Shift the target down by the number of items being moved from before the target\n  for (let index of indices) {\n    if (index < toIndex) {\n      toIndex--;\n    }\n  }\n\n  let moves = indices.map(from => ({\n    from,\n    to: toIndex++\n  }));\n\n  // Shift later from indices down if they have a larger index\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i].from;\n    for (let j = i; j < moves.length; j++) {\n      let b = moves[j].from;\n\n      if (b > a) {\n        moves[j].from--;\n      }\n    }\n  }\n\n  // Interleave the moves so they can be applied one by one rather than all at once\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i];\n    for (let j = moves.length - 1; j > i; j--) {\n      let b = moves[j];\n\n      if (b.from < a.to) {\n        a.to++;\n      } else {\n        b.from++;\n      }\n    }\n  }\n\n  let copy = state.items.slice();\n  for (let move of moves) {\n    let [item] = copy.splice(move.from, 1);\n    copy.splice(move.to, 0, item);\n  }\n\n  return {\n    ...state,\n    items: copy\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createListActions, ListData, ListState} from './useListData';\nimport {Key, Reducer, useEffect, useReducer} from 'react';\nimport {LoadingState, Selection, SortDescriptor} from '@react-types/shared';\n\nexport interface AsyncListOptions<T, C> {\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** The initial sort descriptor. */\n  initialSortDescriptor?: SortDescriptor,\n  /** The initial filter text. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that loads the data for the items in the list. */\n  load: AsyncListLoadFunction<T, C>,\n  /**\n   * An optional function that performs sorting. If not provided,\n   * then `sortDescriptor` is passed to the `load` function.\n   */\n  sort?: AsyncListLoadFunction<T, C>\n}\n\ntype AsyncListLoadFunction<T, C> = (state: AsyncListLoadOptions<T, C>) => AsyncListStateUpdate<T, C> | Promise<AsyncListStateUpdate<T, C>>;\n\ninterface AsyncListLoadOptions<T, C> {\n  /** The items currently in the list. */\n  items: T[],\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n  /** The current sort descriptor for the list. */\n  sortDescriptor: SortDescriptor,\n  /** An abort signal used to notify the load function that the request has been aborted. */\n  signal: AbortSignal,\n  /** The pagination cursor returned from the last page load. */\n  cursor?: C,\n  /** The current filter text used to perform server side filtering. */\n  filterText?: string,\n  /** The current loading state of the list. */\n  loadingState?: LoadingState\n}\n\ninterface AsyncListStateUpdate<T, C> {\n  /** The new items to append to the list. */\n  items: Iterable<T>,\n  /** The keys to add to the selection. */\n  selectedKeys?: Iterable<Key>,\n  /** The sort descriptor to set. */\n  sortDescriptor?: SortDescriptor,\n  /** The pagination cursor to be used for the next page load. */\n  cursor?: C,\n  /** The updated filter text for the list. */\n  filterText?: string\n}\n\ninterface AsyncListState<T, C> extends ListState<T> {\n  state: LoadingState,\n  items: T[],\n  // disabledKeys?: Iterable<Key>,\n  selectedKeys: Selection,\n  // selectedKey?: Key,\n  // expandedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  cursor?: C\n}\n\ntype ActionType = 'success' | 'error' | 'loading' | 'loadingMore' | 'sorting' | 'update' | 'filtering';\ninterface Action<T, C> {\n  type: ActionType,\n  items?: Iterable<T>,\n  selectedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  updater?: (state: ListState<T>) => ListState<T>,\n  cursor?: C,\n  filterText?: string\n}\n\nexport interface AsyncListData<T> extends ListData<T> {\n  /** Whether data is currently being loaded. */\n  isLoading: boolean,\n  /** If loading data failed, then this contains the error that occurred. */\n  error?: Error,\n  // disabledKeys?: Set<Key>,\n  // selectedKey?: Key,\n  // expandedKeys?: Set<Key>,\n  /** The current sort descriptor for the list. */\n  sortDescriptor?: SortDescriptor,\n\n  /** Reloads the data in the list. */\n  reload(): void,\n  /** Loads the next page of data in the list. */\n  loadMore(): void,\n  /** Triggers sorting for the list. */\n  sort(descriptor: SortDescriptor): void,\n  /** The current loading state for the list. */\n  loadingState: LoadingState\n}\n\nfunction reducer<T, C>(data: AsyncListState<T, C>, action: Action<T, C>): AsyncListState<T, C> {\n  let selectedKeys;\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: action.abortController\n          };\n        case 'update':\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        case 'success':\n        case 'error':\n          return data;\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          selectedKeys = action.selectedKeys ?? data.selectedKeys;\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          selectedKeys = (data.selectedKeys === 'all' || action.selectedKeys === 'all')\n            ? 'all'\n            : new Set([...data.selectedKeys, ...(action.selectedKeys ?? [])]);\n          // Append the new items\n          return {\n            ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error\n          };\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n\n          return data;\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\n\n/**\n * Manages state for an immutable async loaded list data structure, and provides convenience methods to\n * update the data over time. Manages loading and error states, pagination, and sorting.\n */\nexport function useAsyncList<T, C = string>(options: AsyncListOptions<T, C>): AsyncListData<T> {\n  const {\n    load,\n    sort,\n    initialSelectedKeys,\n    initialSortDescriptor,\n    getKey = (item: any) => item.id || item.key,\n    initialFilterText = ''\n  } = options;\n\n  let [data, dispatch] = useReducer<Reducer<AsyncListState<T, C>, Action<T, C>>>(reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  });\n\n  const dispatchFetch = async (action: Action<T, C>, fn: AsyncListLoadFunction<T, C>) => {\n    let abortController = new AbortController();\n    try {\n      dispatch({...action, abortController});\n      let previousFilterText = action.filterText ?? data.filterText;\n\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null,\n        filterText: previousFilterText\n      });\n\n      let filterText = response.filterText ?? previousFilterText;\n      dispatch({type: 'success', ...response, abortController});\n\n      // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n      // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n      if (filterText && (filterText !== previousFilterText) && !abortController.signal.aborted) {\n        dispatchFetch({type: 'filtering', filterText}, load);\n      }\n    } catch (e) {\n      dispatch({type: 'error', error: e, abortController});\n    }\n  };\n\n  useEffect(() => {\n    dispatchFetch({type: 'loading'}, load);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n    getItem(key: Key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n    reload() {\n      dispatchFetch({type: 'loading'}, load);\n    },\n    loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) {\n        return;\n      }\n\n      dispatchFetch({type: 'loadingMore'}, load);\n    },\n    sort(sortDescriptor: SortDescriptor) {\n      dispatchFetch({type: 'sorting', sortDescriptor}, sort || load);\n    },\n    ...createListActions({...options, getKey, cursor: data.cursor}, fn => {\n      dispatch({type: 'update', updater: fn});\n    }),\n    setFilterText(filterText: string) {\n      dispatchFetch({type: 'filtering', filterText}, load);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\n\nexport interface TreeOptions<T extends object> {\n  /** Initial root items in the tree. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns the children for an item object. */\n  getChildren?: (item: T) => T[]\n}\n\ninterface TreeNode<T extends object> {\n  /** A unique key for the tree node. */\n  key: Key,\n  /** The key of the parent node. */\n  parentKey: Key,\n  /** The value object for the tree node. */\n  value: T,\n  /** Children of the tree node. */\n  children: TreeNode<T>[]\n}\n\nexport interface TreeData<T extends object> {\n  /** The root nodes in the tree. */\n  items: TreeNode<T>[],\n\n  /** The keys of the currently selected items in the tree. */\n  selectedKeys: Set<Key>,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Set<Key>): void,\n\n  /**\n   * Gets a node from the tree by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): TreeNode<T>,\n\n  /**\n   * Inserts an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param index - The index within the parent to insert into.\n   * @param value - The value to insert.\n   */\n  insert(parentKey: Key | null, index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  append(parentKey: Key | null, ...values: T[]): void,\n\n  /**\n   * Prepends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  prepend(parentKey: Key | null, ...value: T[]): void,\n\n  /**\n   * Removes an item from the tree by its key.\n   * @param key - The key of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the tree that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the tree.\n   * @param key - The key of the item to move.\n   * @param toParentKey - The key of the new parent to insert into.\n   * @param index - The index within the new parent to insert at.\n   */\n  move(key: Key, toParentKey: Key, index: number): void,\n\n  /**\n   * Updates an item in the tree.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\n/**\n * Manages state for an immutable tree data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useTreeData<T extends object>(options: TreeOptions<T>): TreeData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    getChildren = (item: any) => item.children\n  } = options;\n  let map = useMemo(() => new Map<Key, TreeNode<T>>(), []);\n\n  // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  let initialNodes = useMemo(() => buildTree(initialItems), []);\n  let [items, setItems] = useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = useState(new Set<Key>(initialSelectedKeys || []));\n\n  function buildTree(initialItems: T[] = [], parentKey?: Key | null) {\n    return initialItems.map(item => {\n      let node: TreeNode<T> = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items: TreeNode<T>[], key: Key, update: (node: TreeNode<T>) => TreeNode<T>) {\n    let node = map.get(key);\n    if (!node) {\n      return items;\n    }\n\n    // Create a new node. If null, then delete the node, otherwise replace.\n    let newNode = update(node);\n    if (newNode == null) {\n      deleteNode(node);\n    } else {\n      addNode(newNode);\n    }\n\n    // Walk up the tree and update each parent to refer to the new chilren.\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy: TreeNode<T> = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n\n      let children = nextParent.children;\n      if (newNode == null) {\n        children = children.filter(c => c !== node);\n      }\n\n      copy.children = children.map(child => {\n        if (child === node) {\n          return newNode;\n        }\n\n        return child;\n      });\n\n      map.set(copy.key, copy);\n\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) {\n      items = items.filter(c => c !== node);\n    }\n\n    return items.map(item => {\n      if (item === node) {\n        return newNode;\n      }\n\n      return item;\n    });\n  }\n\n  function addNode(node: TreeNode<T>) {\n    map.set(node.key, node);\n    for (let child of node.children) {\n      addNode(child);\n    }\n  }\n\n  function deleteNode(node: TreeNode<T>) {\n    map.delete(node.key);\n    for (let child of node.children) {\n      deleteNode(child);\n    }\n  }\n\n  return {\n    items,\n    selectedKeys,\n    setSelectedKeys,\n    getItem(key: Key) {\n      return map.get(key);\n    },\n    insert(parentKey: Key | null, index: number, ...values: T[]) {\n      setItems(items => {\n        let nodes = buildTree(values, parentKey);\n\n        // If parentKey is null, insert into the root.\n        if (parentKey == null) {\n          return [\n            ...items.slice(0, index),\n            ...nodes,\n            ...items.slice(index)\n          ];\n        }\n\n        // Otherwise, update the parent node and its ancestors.\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            ...nodes,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    insertBefore(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index, ...values);\n    },\n    insertAfter(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index + 1, ...values);\n    },\n    prepend(parentKey: Key | null, ...values: T[]) {\n      this.insert(parentKey, 0, ...values);\n    },\n    append(parentKey: Key | null, ...values: T[]) {\n      if (parentKey == null) {\n        this.insert(null, items.length, ...values);\n      } else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) {\n          return;\n        }\n\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n    remove(...keys: Key[]) {\n      let newItems = items;\n      for (let key of keys) {\n        newItems = updateTree(newItems, key, () => null);\n      }\n\n      setItems(newItems);\n\n      let selection = new Set(selectedKeys);\n      for (let key of selectedKeys) {\n        if (!map.has(key)) {\n          selection.delete(key);\n        }\n      }\n\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n    move(key: Key, toParentKey: Key, index: number) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) {\n          return items;\n        }\n\n        items = updateTree(items, key, () => null);\n\n        const movedNode = {\n          ...node,\n          parentKey: toParentKey\n        };\n\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            movedNode,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    update(oldKey: Key, newValue: T) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node: TreeNode<T> = {\n          key: oldNode.key,\n          parentKey: oldNode.parentKey,\n          value: newValue,\n          children: null\n        };\n\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}