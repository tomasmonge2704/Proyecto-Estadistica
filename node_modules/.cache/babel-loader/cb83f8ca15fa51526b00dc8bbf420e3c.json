{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _toConsumableArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { useMemo as $cAn5f$useMemo, useEffect as $cAn5f$useEffect } from \"react\";\nimport { useMultipleSelectionState as $cAn5f$useMultipleSelectionState, SelectionManager as $cAn5f$SelectionManager } from \"@react-stately/selection\";\n\nfunction $62967d126f3aa823$export$4007ac09ff9c68ed(props) {\n  var collection = props.collection,\n      focusMode = props.focusMode;\n  var selectionState = $cAn5f$useMultipleSelectionState(props);\n  var disabledKeys = $cAn5f$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var setFocusedKey = selectionState.setFocusedKey;\n\n  selectionState.setFocusedKey = function (key, child) {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      var item = collection.getItem(key);\n\n      if ((item === null || item === void 0 ? void 0 : item.type) === 'item') {\n        var ref, ref1;\n\n        var children = _toConsumableArray(item.childNodes);\n\n        if (child === 'last') key = (ref = children[children.length - 1]) === null || ref === void 0 ? void 0 : ref.key;else key = (ref1 = children[0]) === null || ref1 === void 0 ? void 0 : ref1.key;\n      }\n    }\n\n    setFocusedKey(key, child);\n  }; // Reset focused key if that item is deleted from the collection.\n\n\n  $cAn5f$useEffect(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new $cAn5f$SelectionManager(collection, selectionState)\n  };\n}\n\nvar tmp = Symbol.iterator;\n\nvar $16805b1b18093c5f$export$de3fdf6493c353d = /*#__PURE__*/function () {\n  function $16805b1b18093c5f$export$de3fdf6493c353d(opts) {\n    var _this = this;\n\n    _classCallCheck(this, $16805b1b18093c5f$export$de3fdf6493c353d);\n\n    this.keyMap = new Map();\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n\n    var visit = function visit(node) {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      var prevNode = _this.keyMap.get(node.key);\n\n      if (opts.visitNode) node = opts.visitNode(node);\n\n      _this.keyMap.set(node.key, node);\n\n      var childKeys = new Set();\n      var last;\n\n      var _iterator = _createForOfIteratorHelper(node.childNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _child = _step.value;\n          if (_child.type === 'cell' && _child.parentKey == null) // if child is a cell parent key isn't already established by the collection, match child node to parent row\n            _child.parentKey = node.key;\n          childKeys.add(_child.key);\n\n          if (last) {\n            last.nextKey = _child.key;\n            _child.prevKey = last.key;\n          } else _child.prevKey = null;\n\n          visit(_child);\n          last = _child;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (last) last.nextKey = null; // Remove deleted nodes and their children from the key map\n\n      if (prevNode) {\n        var _iterator2 = _createForOfIteratorHelper(prevNode.childNodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var child = _step2.value;\n            if (!childKeys.has(child.key)) remove(child);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    };\n\n    var remove = function remove(node) {\n      _this.keyMap.delete(node.key);\n\n      var _iterator3 = _createForOfIteratorHelper(node.childNodes),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          if (_this.keyMap.get(child.key) === child) remove(child);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    };\n\n    var last1;\n    opts.items.forEach(function (node, i) {\n      var rowNode = _objectSpread(_objectSpread({\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: _toConsumableArray(node.childNodes),\n        rendered: undefined,\n        textValue: undefined\n      }, node), {}, {\n        index: i\n      });\n\n      if (last1) {\n        last1.nextKey = rowNode.key;\n        rowNode.prevKey = last1.key;\n      } else rowNode.prevKey = null;\n\n      _this.rows.push(rowNode);\n\n      visit(rowNode);\n      last1 = rowNode;\n    });\n    if (last1) last1.nextKey = null;\n  }\n\n  _createClass($16805b1b18093c5f$export$de3fdf6493c353d, [{\n    key: tmp,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(_toConsumableArray(this.rows), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.rows).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.rows)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n\n      var rows = _toConsumableArray(this.rows);\n\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $16805b1b18093c5f$export$de3fdf6493c353d;\n}();\n\nexport { $62967d126f3aa823$export$4007ac09ff9c68ed as useGridState, $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"mappings":"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","names":["$62967d126f3aa823$export$4007ac09ff9c68ed","props","collection","focusMode","selectionState","$cAn5f$useMultipleSelectionState","disabledKeys","$cAn5f$useMemo","Set","setFocusedKey","key","child","item","getItem","type","ref","ref1","children","childNodes","length","$cAn5f$useEffect","focusedKey","isKeyboardNavigationDisabled","selectionManager","$cAn5f$SelectionManager","Symbol","iterator","$16805b1b18093c5f$export$de3fdf6493c353d","opts","keyMap","Map","columnCount","rows","visit","node","prevNode","get","visitNode","set","childKeys","last","parentKey","add","nextKey","prevKey","has","remove","delete","last1","items","forEach","i","rowNode","level","value","undefined","hasChildNodes","rendered","textValue","index","push","keys","idx","getKeys"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/grid/dist/packages/@react-stately/grid/src/useGridState.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/grid/dist/packages/@react-stately/grid/src/GridCollection.ts"],"sourcesContent":["import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean\n}\n\nexport interface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}