{"ast":null,"code":"import _objectSpread from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  var _props$elementType = props.elementType,\n      elementType = _props$elementType === void 0 ? 'button' : _props$elementType,\n      isDisabled = props.isDisabled,\n      onPress = props.onPress,\n      onPressStart = props.onPressStart,\n      onPressEnd = props.onPressEnd,\n      onPressChange = props.onPressChange,\n      // @ts-ignore - undocumented\n  preventFocusOnPress = props.preventFocusOnPress,\n      // @ts-ignore - undocumented\n  allowFocusWhenDisabled = props.allowFocusWhenDisabled,\n      deprecatedOnClick = props.onClick,\n      href = props.href,\n      target = props.target,\n      rel = props.rel,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type;\n  var additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === 'a' && isDisabled ? undefined : href,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n\n  var _$cE0pI$usePress = $cE0pI$usePress({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  }),\n      pressProps = _$cE0pI$usePress.pressProps,\n      isPressed = _$cE0pI$usePress.isPressed;\n\n  var _$cE0pI$useFocusable = $cE0pI$useFocusable(props, ref),\n      focusableProps = _$cE0pI$useFocusable.focusableProps;\n\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  var buttonProps = $cE0pI$mergeProps(focusableProps, pressProps, $cE0pI$filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: function onClick(e) {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  var isSelected = state.isSelected;\n\n  var _$701a24aa0da5b062$ex = $701a24aa0da5b062$export$ea18c227d4417cc3(_objectSpread(_objectSpread({}, props), {}, {\n    onPress: $cE0pI$chain(state.toggle, props.onPress)\n  }), ref),\n      isPressed = _$701a24aa0da5b062$ex.isPressed,\n      buttonProps = _$701a24aa0da5b062$ex.buttonProps;\n\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"mappings":"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","names":["$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","deprecatedOnClick","onClick","href","target","rel","type","additionalProps","disabled","role","tabIndex","undefined","$cE0pI$usePress","pressProps","isPressed","$cE0pI$useFocusable","focusableProps","buttonProps","$cE0pI$mergeProps","$cE0pI$filterDOMProps","labelable","e","console","warn","$55f54f7887471b58$export$51e84d46ca0bc451","state","isSelected","$cE0pI$chain","toggle"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useButton.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}