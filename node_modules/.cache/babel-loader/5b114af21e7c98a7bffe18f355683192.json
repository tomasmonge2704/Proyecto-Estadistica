{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport $1BfjW$react, { useRef as $1BfjW$useRef, useState as $1BfjW$useState, useCallback as $1BfjW$useCallback, useMemo as $1BfjW$useMemo } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\n\nfunction $30561577df230a30$export$f61abf052f87399f(widths) {\n  return Array.from(widths).map(function (e) {\n    return e[1];\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  }, 0);\n}\n\nfunction $30561577df230a30$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nfunction $30561577df230a30$var$parseFractionalUnit(width) {\n  if (!width) return 1;\n  var match = width.match(/^(\\d+)(?=fr$)/); // if width is the incorrect format, just deafult it to a 1fr\n\n  if (!match) {\n    console.warn(\"width: \".concat(width, \" is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')\"), 'defaulting to \\'1fr\\'');\n    return 1;\n  }\n\n  return parseInt(match[0], 10);\n}\n\nfunction $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === 'string') {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error('Only percentages or numbers are supported for static column widths');\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n\n  return width;\n}\n\nfunction $30561577df230a30$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Infinity;\n}\n\nfunction $30561577df230a30$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(minWidth, tableWidth) : 75;\n}\n\nfunction $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, column) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column, index) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var delta = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth) - targetWidth, targetWidth - $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth));\n    return _objectSpread(_objectSpread({}, column), {}, {\n      index: index,\n      delta: delta\n    });\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$var$findDynamicColumnWidths(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, col) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(col.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var width = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth), Math.min(Math.floor(targetWidth), $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth)));\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, availableSpace, tableWidth) {\n  var columns = $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return b.delta - a.delta;\n  });\n  columns = $30561577df230a30$var$findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return columns;\n}\n\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n      _props$tableWidth = props.tableWidth,\n      defaultTableWidth = _props$tableWidth === void 0 ? null : _props$tableWidth;\n  var columns1 = state.columns;\n  var columnsRef = $1BfjW$useRef([]);\n  var tableWidth = $1BfjW$useRef(defaultTableWidth);\n  var isResizing = $1BfjW$useRef(null);\n  var startResizeContentWidth = $1BfjW$useRef();\n\n  var _$1BfjW$useState = $1BfjW$useState(new Map(columns1.map(function (col) {\n    return [col.key, 0];\n  }))),\n      _$1BfjW$useState2 = _slicedToArray(_$1BfjW$useState, 2),\n      columnWidths = _$1BfjW$useState2[0],\n      setColumnWidths = _$1BfjW$useState2[1];\n\n  var columnWidthsRef = $1BfjW$useRef(columnWidths);\n  var affectedColumnWidthsRef = $1BfjW$useRef([]);\n\n  var _$1BfjW$useState3 = $1BfjW$useState(new Set()),\n      _$1BfjW$useState4 = _slicedToArray(_$1BfjW$useState3, 2),\n      resizedColumns = _$1BfjW$useState4[0],\n      setResizedColumns = _$1BfjW$useState4[1];\n\n  var resizedColumnsRef = $1BfjW$useRef(resizedColumns);\n\n  var _$1BfjW$useState5 = $1BfjW$useState(null),\n      _$1BfjW$useState6 = _slicedToArray(_$1BfjW$useState5, 2),\n      currentlyResizingColumn = _$1BfjW$useState6[0],\n      setCurrentlyResizingColumn = _$1BfjW$useState6[1];\n\n  function setColumnWidthsForRef(newWidths) {\n    columnWidthsRef.current = newWidths; // new map so that change detection is triggered\n\n    setColumnWidths(newWidths);\n  }\n  /*\n  returns the resolved column width in this order:\n  previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n\n\n  var getResolvedColumnWidth = $1BfjW$useCallback(function (column) {\n    var columnProps = column.props;\n\n    var _width, ref, ref1;\n\n    return (resizedColumns === null || resizedColumns === void 0 ? void 0 : resizedColumns.has(column.key)) ? columnWidthsRef.current.get(column.key) : (ref1 = (ref = (_width = columnProps.width) !== null && _width !== void 0 ? _width : columnProps.defaultWidth) !== null && ref !== void 0 ? ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(column.props)) !== null && ref1 !== void 0 ? ref1 : '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n  var getStaticAndDynamicColumns = $1BfjW$useCallback(function (columns) {\n    return columns.reduce(function (acc, column) {\n      var width = getResolvedColumnWidth(column);\n      return $30561577df230a30$export$1994a077b98ee0d5(width) ? _objectSpread(_objectSpread({}, acc), {}, {\n        staticColumns: [].concat(_toConsumableArray(acc.staticColumns), [column])\n      }) : _objectSpread(_objectSpread({}, acc), {}, {\n        dynamicColumns: [].concat(_toConsumableArray(acc.dynamicColumns), [column])\n      });\n    }, {\n      staticColumns: [],\n      dynamicColumns: []\n    });\n  }, [getResolvedColumnWidth]);\n  var buildColumnWidths = $1BfjW$useCallback(function (affectedColumns, availableSpace) {\n    var widths = new Map();\n    var remainingSpace = availableSpace;\n\n    var _getStaticAndDynamicC = getStaticAndDynamicColumns(affectedColumns),\n        staticColumns = _getStaticAndDynamicC.staticColumns,\n        dynamicColumns = _getStaticAndDynamicC.dynamicColumns;\n\n    staticColumns.forEach(function (column) {\n      var width = getResolvedColumnWidth(column);\n      var w = $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    }); // dynamic columns\n\n    if (dynamicColumns.length > 0) {\n      var newColumnWidths = $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, remainingSpace, tableWidth.current);\n\n      var _iterator = _createForOfIteratorHelper(newColumnWidths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var column = _step.value;\n          widths.set(column.key, column.calculatedWidth);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n  var prevColKeys = columnsRef.current.map(function (col) {\n    return col.key;\n  });\n  var colKeys = columns1.map(function (col) {\n    return col.key;\n  }); // if the columns change, need to rebuild widths.\n\n  if (prevColKeys.length !== colKeys.length || !colKeys.every(function (col, i) {\n    return col === prevColKeys[i];\n  })) {\n    columnsRef.current = columns1;\n    var widths = buildColumnWidths(columns1, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n\n      if (!isResizing.current) {\n        var _widths = buildColumnWidths(columns1, width);\n\n        setColumnWidthsForRef(_widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = $30561577df230a30$export$f61abf052f87399f(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column, width) {\n    var widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function onColumnResizeEnd(column) {\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    props.onColumnResizeEnd && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    affectedColumnWidthsRef.current = [];\n    var widths = new Map(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column1, newWidth) {\n    var boundedWidth = Math.max($30561577df230a30$export$f556054ce4358701(column1.props.minWidth, tableWidth.current), Math.min(Math.floor(newWidth), $30561577df230a30$export$59185c62a7544aa0(column1.props.maxWidth, tableWidth.current))); // copy the columnWidths map and set the new width for the column being resized\n\n    var widths = new Map(columnWidthsRef.current);\n    widths.set(column1.key, boundedWidth); // keep track of all columns that have been sized\n\n    resizedColumnsRef.current.add(column1.key);\n    setResizedColumns(resizedColumnsRef.current); // get the columns affected by resize and remaining space\n\n    var resizeIndex = columnsRef.current.findIndex(function (col) {\n      return col.key === column1.key;\n    });\n    var affectedColumns = columnsRef.current.slice(resizeIndex + 1); // we only care about the columns that CAN be resized, we ignore static columns.\n\n    var _getStaticAndDynamicC2 = getStaticAndDynamicColumns(affectedColumns),\n        dynamicColumns = _getStaticAndDynamicC2.dynamicColumns; // available space for affected columns\n\n\n    var availableSpace = columnsRef.current.reduce(function (acc, column, index) {\n      if (index <= resizeIndex || $30561577df230a30$export$1994a077b98ee0d5(getResolvedColumnWidth(column))) return acc - widths.get(column.key);\n      return acc;\n    }, tableWidth.current); // merge the unaffected column widths and the recalculated column widths\n\n    var recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map([].concat(_toConsumableArray(widths), _toConsumableArray(recalculatedColumnWidths)));\n    setColumnWidthsForRef(widths);\n    /*\n    when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n    so we need to add it to the list of affected columns\n    */\n\n    var allAffectedColumns = [[column1.key, boundedWidth]].concat(_toConsumableArray(recalculatedColumnWidths)).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          width = _ref2[1];\n\n      return {\n        key: key,\n        width: width\n      };\n    });\n    return allAffectedColumns;\n  }\n\n  var ref2; // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n\n  var getColumnWidth = $1BfjW$useCallback(function (key) {\n    return (ref2 = columnWidthsRef.current.get(key)) !== null && ref2 !== void 0 ? ref2 : 0;\n  }, [columnWidthsRef.current]);\n  var getColumnMinWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$f556054ce4358701(columns1[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns1]);\n  var getColumnMaxWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$59185c62a7544aa0(columns1[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns1]);\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth: setTableWidth,\n    onColumnResize: onColumnResize,\n    onColumnResizeStart: onColumnResizeStart,\n    onColumnResizeEnd: onColumnResizeEnd,\n    getColumnWidth: getColumnWidth,\n    getColumnMinWidth: getColumnMinWidth,\n    getColumnMaxWidth: getColumnMaxWidth,\n    currentlyResizingColumn: currentlyResizingColumn\n  };\n}\n\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  var columns = [];\n  var seen = new Map();\n\n  var _iterator2 = _createForOfIteratorHelper(columnNodes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var column = _step2.value;\n      var parentKey = column.parentKey;\n      var col = [column];\n\n      while (parentKey) {\n        var parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n        // with a previous column. If the current column is taller\n        // than the previous column, than we need to shift the parent\n        // in the previous column so it's level with the current column.\n\n        if (seen.has(parent)) {\n          parent.colspan++;\n\n          var _seen$get = seen.get(parent),\n              _column = _seen$get.column,\n              index = _seen$get.index;\n\n          if (index > col.length) break;\n\n          for (var _i3 = index; _i3 < col.length; _i3++) {\n            _column.splice(_i3, 0, null);\n          } // Adjust shifted indices\n\n\n          for (var i1 = col.length; i1 < _column.length; i1++) {\n            if (_column[i1] && seen.has(_column[i1])) seen.get(_column[i1]).index = i1;\n          }\n        } else {\n          parent.colspan = 1;\n          col.push(parent);\n          seen.set(parent, {\n            column: col,\n            index: col.length - 1\n          });\n        }\n\n        parentKey = parent.parentKey;\n      }\n\n      columns.push(col);\n      column.index = columns.length - 1;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  }); // Convert columns into rows.\n\n  var colIndex = 0;\n\n  for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n    var column1 = _columns[_i];\n\n    var _i2 = maxLength - 1;\n\n    var _iterator3 = _createForOfIteratorHelper(column1),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var item = _step3.value;\n\n        if (item) {\n          // Fill the space up until the current column with a placeholder\n          var row = headerRows[_i2];\n          var rowLength = row.reduce(function (p, c) {\n            return p + c.colspan;\n          }, 0);\n\n          if (rowLength < colIndex) {\n            var placeholder = {\n              type: 'placeholder',\n              key: 'placeholder-' + item.key,\n              colspan: colIndex - rowLength,\n              index: rowLength,\n              value: null,\n              rendered: null,\n              level: _i2,\n              hasChildNodes: false,\n              childNodes: [],\n              textValue: null\n            };\n\n            if (row.length > 0) {\n              row[row.length - 1].nextKey = placeholder.key;\n              placeholder.prevKey = row[row.length - 1].key;\n            }\n\n            row.push(placeholder);\n          }\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = item.key;\n            item.prevKey = row[row.length - 1].key;\n          }\n\n          item.level = _i2;\n          item.index = colIndex;\n          row.push(item);\n        }\n\n        _i2--;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  var i = 0;\n\n  var _iterator4 = _createForOfIteratorHelper(headerRows),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var row1 = _step4.value;\n\n      var _rowLength = row1.reduce(function (p, c) {\n        return p + c.colspan;\n      }, 0);\n\n      if (_rowLength < columnNodes.length) {\n        var _placeholder = {\n          type: 'placeholder',\n          key: 'placeholder-' + row1[row1.length - 1].key,\n          colspan: columnNodes.length - _rowLength,\n          index: _rowLength,\n          value: null,\n          rendered: null,\n          level: i,\n          hasChildNodes: false,\n          childNodes: [],\n          textValue: null,\n          prevKey: row1[row1.length - 1].key\n        };\n        row1.push(_placeholder);\n      }\n\n      i++;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nvar $788781baa30117fa$export$596e1b2e2cf93690 = /*#__PURE__*/function (_$1BfjW$GridCollectio) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _$1BfjW$GridCollectio);\n\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this;\n\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    var rows = [];\n    var columnKeyMap = new Map();\n\n    var visit = function visit(node) {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(node.childNodes),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var child = _step5.value;\n          visit(child);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    };\n\n    var _iterator6 = _createForOfIteratorHelper(nodes),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var node1 = _step6.value;\n        visit(node1);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this.columns = columns;\n    _this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this.body = body;\n    _this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (_this.rowHeaderColumnKeys.size === 0) _this.rowHeaderColumnKeys.add(_this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n    return _this;\n  }\n\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: tmp,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.body.childNodes).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.body.childNodes)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n\n      var rows = _toConsumableArray(this.body.childNodes);\n\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}($1BfjW$GridCollection);\n\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _$1BfjW$useState7 = $1BfjW$useState(false),\n      _$1BfjW$useState8 = _slicedToArray(_$1BfjW$useState7, 2),\n      isKeyboardNavigationDisabled = _$1BfjW$useState8[0],\n      setKeyboardNavigationDisabled = _$1BfjW$useState8[1];\n\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode;\n  var context = $1BfjW$useMemo(function () {\n    return {\n      showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, props.showSelectionCheckboxes, selectionMode]);\n  var collection = $1BfjW$useCollection(props, function (nodes, prev) {\n    return new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context);\n  }, context);\n\n  var _$1BfjW$useGridState = $1BfjW$useGridState(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  })),\n      disabledKeys = _$1BfjW$useGridState.disabledKeys,\n      selectionManager = _$1BfjW$useGridState.selectionManager;\n\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n  };\n}\n\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, columns, _iterator7, _step7, column, _columns2;\n\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          children = props.children, columns = props.columns;\n\n          if (!(typeof children === 'function')) {\n            _context2.next = 23;\n            break;\n          }\n\n          if (columns) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new Error('props.children was a function but props.columns is missing');\n\n        case 4:\n          _iterator7 = _createForOfIteratorHelper(columns);\n          _context2.prev = 5;\n\n          _iterator7.s();\n\n        case 7:\n          if ((_step7 = _iterator7.n()).done) {\n            _context2.next = 13;\n            break;\n          }\n\n          column = _step7.value;\n          _context2.next = 11;\n          return {\n            type: 'column',\n            value: column,\n            renderer: children\n          };\n\n        case 11:\n          _context2.next = 7;\n          break;\n\n        case 13:\n          _context2.next = 18;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](5);\n\n          _iterator7.e(_context2.t0);\n\n        case 18:\n          _context2.prev = 18;\n\n          _iterator7.f();\n\n          return _context2.finish(18);\n\n        case 21:\n          _context2.next = 26;\n          break;\n\n        case 23:\n          _columns2 = [];\n          $1BfjW$react.Children.forEach(children, function (column) {\n            _columns2.push({\n              type: 'column',\n              element: column\n            });\n          });\n          return _context2.delegateYield(_columns2, \"t1\", 26);\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, getCollectionNode, null, [[5, 15, 18, 21]]);\n});\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\n\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, items1;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          children = props.children, items1 = props.items;\n          _context4.next = 3;\n          return {\n            type: 'body',\n            hasChildNodes: true,\n            props: props,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator8, _step8, item, items;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (!(typeof children === 'function')) {\n                        _context3.next = 22;\n                        break;\n                      }\n\n                      if (items1) {\n                        _context3.next = 3;\n                        break;\n                      }\n\n                      throw new Error('props.children was a function but props.items is missing');\n\n                    case 3:\n                      _iterator8 = _createForOfIteratorHelper(items1);\n                      _context3.prev = 4;\n\n                      _iterator8.s();\n\n                    case 6:\n                      if ((_step8 = _iterator8.n()).done) {\n                        _context3.next = 12;\n                        break;\n                      }\n\n                      item = _step8.value;\n                      _context3.next = 10;\n                      return {\n                        type: 'item',\n                        value: item,\n                        renderer: children\n                      };\n\n                    case 10:\n                      _context3.next = 6;\n                      break;\n\n                    case 12:\n                      _context3.next = 17;\n                      break;\n\n                    case 14:\n                      _context3.prev = 14;\n                      _context3.t0 = _context3[\"catch\"](4);\n\n                      _iterator8.e(_context3.t0);\n\n                    case 17:\n                      _context3.prev = 17;\n\n                      _iterator8.f();\n\n                      return _context3.finish(17);\n\n                    case 20:\n                      _context3.next = 25;\n                      break;\n\n                    case 22:\n                      items = [];\n                      $1BfjW$react.Children.forEach(children, function (item) {\n                        items.push({\n                          type: 'item',\n                          element: item\n                        });\n                      });\n                      return _context3.delegateYield(items, \"t1\", 25);\n\n                    case 25:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, childNodes, null, [[4, 14, 17, 20]]);\n            })\n          };\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\n\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n\n$1cd244557c2f97d5$var$Column.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context1) {\n  var title, children, childColumns1, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          title = props.title, children = props.children, childColumns1 = props.childColumns;\n          rendered = title || children;\n          textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n          _context6.next = 5;\n          return {\n            type: 'column',\n            hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n            rendered: rendered,\n            textValue: textValue,\n            props: props,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator9, _step9, child1, childColumns;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      if (!childColumns1) {\n                        _context5.next = 20;\n                        break;\n                      }\n\n                      _iterator9 = _createForOfIteratorHelper(childColumns1);\n                      _context5.prev = 2;\n\n                      _iterator9.s();\n\n                    case 4:\n                      if ((_step9 = _iterator9.n()).done) {\n                        _context5.next = 10;\n                        break;\n                      }\n\n                      child1 = _step9.value;\n                      _context5.next = 8;\n                      return {\n                        type: 'column',\n                        value: child1\n                      };\n\n                    case 8:\n                      _context5.next = 4;\n                      break;\n\n                    case 10:\n                      _context5.next = 15;\n                      break;\n\n                    case 12:\n                      _context5.prev = 12;\n                      _context5.t0 = _context5[\"catch\"](2);\n\n                      _iterator9.e(_context5.t0);\n\n                    case 15:\n                      _context5.prev = 15;\n\n                      _iterator9.f();\n\n                      return _context5.finish(15);\n\n                    case 18:\n                      _context5.next = 24;\n                      break;\n\n                    case 20:\n                      if (!title) {\n                        _context5.next = 24;\n                        break;\n                      }\n\n                      childColumns = [];\n                      $1BfjW$react.Children.forEach(children, function (child) {\n                        childColumns.push({\n                          type: 'column',\n                          element: child\n                        });\n                      });\n                      return _context5.delegateYield(childColumns, \"t1\", 24);\n\n                    case 24:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, childNodes, null, [[2, 12, 15, 18]]);\n            }),\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              // This is a bit of a hack, but it works.\n              // If this method is called, then there's a cached version of this node available.\n              // But, we need to keep the list of columns in the new context up to date.\n              updateContext(newContext);\n              return false;\n            }\n          };\n\n        case 5:\n          fullNodes = _context6.sent;\n\n          updateContext = function updateContext(context) {\n            // register leaf columns on the context so that <Row> can access them\n            var _iterator10 = _createForOfIteratorHelper(fullNodes),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var node = _step10.value;\n                if (!node.hasChildNodes) context.columns.push(node);\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          };\n\n          updateContext(context1);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\n\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n\n$70d70eb16ea48428$var$Row.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          children = props.children, textValue = props.textValue;\n          _context8.next = 3;\n          return {\n            type: 'item',\n            props: props,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: true,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator11, _step11, column, cells;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      if (!(context.showSelectionCheckboxes && context.selectionMode !== 'none')) {\n                        _context7.next = 3;\n                        break;\n                      }\n\n                      _context7.next = 3;\n                      return {\n                        type: 'cell',\n                        key: 'header',\n                        props: {\n                          isSelectionCell: true\n                        }\n                      };\n\n                    case 3:\n                      if (!(typeof children === 'function')) {\n                        _context7.next = 23;\n                        break;\n                      }\n\n                      _iterator11 = _createForOfIteratorHelper(context.columns);\n                      _context7.prev = 5;\n\n                      _iterator11.s();\n\n                    case 7:\n                      if ((_step11 = _iterator11.n()).done) {\n                        _context7.next = 13;\n                        break;\n                      }\n\n                      column = _step11.value;\n                      _context7.next = 11;\n                      return {\n                        type: 'cell',\n                        element: children(column.key),\n                        key: column.key // this is combined with the row key by CollectionBuilder\n\n                      };\n\n                    case 11:\n                      _context7.next = 7;\n                      break;\n\n                    case 13:\n                      _context7.next = 18;\n                      break;\n\n                    case 15:\n                      _context7.prev = 15;\n                      _context7.t0 = _context7[\"catch\"](5);\n\n                      _iterator11.e(_context7.t0);\n\n                    case 18:\n                      _context7.prev = 18;\n\n                      _iterator11.f();\n\n                      return _context7.finish(18);\n\n                    case 21:\n                      _context7.next = 28;\n                      break;\n\n                    case 23:\n                      cells = [];\n                      $1BfjW$react.Children.forEach(children, function (cell) {\n                        cells.push({\n                          type: 'cell',\n                          element: cell\n                        });\n                      });\n\n                      if (!(cells.length !== context.columns.length)) {\n                        _context7.next = 27;\n                        break;\n                      }\n\n                      throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n\n                    case 27:\n                      return _context7.delegateYield(cells, \"t1\", 28);\n\n                    case 28:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, childNodes, null, [[5, 15, 18, 21]]);\n            }),\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              // Invalidate all rows if the columns changed.\n              return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n                return c.key !== context.columns[i].key;\n              }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n            }\n          };\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n\n$941d1d9a6a28982a$var$Cell.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          children = props.children;\n          textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n          _context9.next = 4;\n          return {\n            type: 'cell',\n            props: props,\n            rendered: children,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: false\n          };\n\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section };","map":{"version":3,"mappings":"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","names":["$30561577df230a30$export$f61abf052f87399f","widths","Array","from","map","e","reduce","acc","cur","$30561577df230a30$export$1994a077b98ee0d5","width","isNaN","String","match","$30561577df230a30$var$parseFractionalUnit","console","warn","parseInt","$30561577df230a30$export$7bbad27896f7ae9f","tableWidth","Error","$30561577df230a30$export$59185c62a7544aa0","maxWidth","Infinity","$30561577df230a30$export$f556054ce4358701","minWidth","$30561577df230a30$var$mapDynamicColumns","dynamicColumns","availableSpace","fractions","sum","column","props","defaultWidth","columns","index","targetWidth","delta","Math","max","$30561577df230a30$var$findDynamicColumnWidths","col","min","floor","calculatedWidth","$30561577df230a30$export$a870e6692ac5ccb2","sort","a","b","$292bc4e09cd0eb62$export$cb895dcf85db1319","state","getDefaultWidth","defaultTableWidth","columns1","columnsRef","$1BfjW$useRef","isResizing","startResizeContentWidth","$1BfjW$useState","Map","key","columnWidths","setColumnWidths","columnWidthsRef","affectedColumnWidthsRef","Set","resizedColumns","setResizedColumns","resizedColumnsRef","currentlyResizingColumn","setCurrentlyResizingColumn","setColumnWidthsForRef","newWidths","current","getResolvedColumnWidth","$1BfjW$useCallback","columnProps","_width","has","get","ref1","ref","getStaticAndDynamicColumns","staticColumns","buildColumnWidths","affectedColumns","remainingSpace","forEach","w","set","length","newColumnWidths","prevColKeys","colKeys","every","i","setTableWidth","onColumnResizeStart","onColumnResize","widthsObj","resizeColumn","onColumnResizeEnd","column1","newWidth","boundedWidth","add","resizeIndex","findIndex","slice","recalculatedColumnWidths","allAffectedColumns","ref2","getColumnWidth","getColumnMinWidth","columnIndex","getColumnMaxWidth","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","random","toString","$788781baa30117fa$var$buildHeaderRows","keyMap","columnNodes","seen","parentKey","parent","colspan","splice","i1","push","maxLength","c","headerRows","fill","colIndex","item","row","rowLength","p","placeholder","type","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","Symbol","iterator","$788781baa30117fa$export$596e1b2e2cf93690","nodes","prev","opts","rowHeaderColumnKeys","body","showSelectionCheckboxes","rowHeaderColumn","isSelectionCell","unshift","rows","columnKeyMap","visit","node","isRowHeader","child","node1","columnCount","items","visitNode","size","keys","idx","getKeys","getItem","$1BfjW$GridCollection","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","isKeyboardNavigationDisabled","setKeyboardNavigationDisabled","selectionMode","context","$1BfjW$useMemo","children","collection","$1BfjW$useCollection","$1BfjW$useGridState","disabledKeys","selectionManager","sortDescriptor","columnKey","direction","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","renderer","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","items1","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","context1","title","childColumns1","childColumns","count","child1","shouldInvalidate","newContext","updateContext","fullNodes","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","cells","cell","some","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/utils.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableColumnResizeState.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableCollection.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableState.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableHeader.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableBody.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Column.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Row.ts","/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Cell.ts"],"sourcesContent":["import {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ntype mappedColumn<T> = GridNode<T> & {\n    index: number,\n    delta: number,\n    calculatedWidth?: number\n};\n\nexport function getContentWidth(widths: Map<Key, number>): number {\n  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);\n}\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n} \n\nfunction parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  } \n  let match = width.match(/^(\\d+)(?=fr$)/);\n      // if width is the incorrect format, just deafult it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, \n        'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseInt(match[0], 10);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n  return width;\n}\n    \n    \nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n        ? parseStaticWidth(maxWidth, tableWidth)\n        : Infinity;\n}\n\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n      ? parseStaticWidth(minWidth, tableWidth)\n      : 75;\n}\n\nfunction mapDynamicColumns<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n        (sum, column) => sum + parseFractionalUnit(column.props.defaultWidth),\n        0\n      );\n    \n  let columns = dynamicColumns.map((column, index) => {\n    const targetWidth =\n          (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    const delta = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth) - targetWidth,\n      targetWidth - getMaxWidth(column.props.maxWidth, tableWidth)\n    );\n\n    return {\n      ...column,\n      index,\n      delta \n    };\n  });\n    \n  return columns;\n}\n\nfunction findDynamicColumnWidths<T>(dynamicColumns: mappedColumn<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n    (sum, col) => sum + parseFractionalUnit(col.props.defaultWidth),\n    0\n  );\n\n  const columns = dynamicColumns.map((column) => {\n    const targetWidth =\n      (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    let width = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth),\n      Math.min(Math.floor(targetWidth), getMaxWidth(column.props.maxWidth, tableWidth))\n    );\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n\n  return columns;\n}  \n    \nexport function getDynamicColumnWidths<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number) {\n  let columns = mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n    \n  columns.sort((a, b) => b.delta - a.delta);\n  columns = findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort((a, b) => a.index - b.index);\n    \n  return columns;\n}\n","\nimport {ColumnProps} from '@react-types/table';\nimport {getContentWidth, getDynamicColumnWidths, getMaxWidth, getMinWidth, isStatic, parseStaticWidth} from './utils';\nimport {GridNode} from '@react-types/grid';\nimport {Key, MutableRefObject, useCallback, useRef, useState} from 'react';\n\ninterface AffectedColumnWidth {\n  /** The column key. */\n  key: Key,\n  /** The column width. */\n  width: number\n}\ninterface AffectedColumnWidths extends Array<AffectedColumnWidth> {}\n\nexport interface TableColumnResizeState<T> {\n  /** A ref whose current value is the state of all the column widths. */\n  columnWidths: MutableRefObject<Map<Key, number>>,\n  /** Setter for the table width. */\n  setTableWidth: (width: number) => void,\n  /** Trigger a resize and recalculation. */\n  onColumnResize: (column: GridNode<T>, width: number) => void,\n  /** Callback for when onColumnResize has started. */\n  onColumnResizeStart: (column: GridNode<T>) => void,\n  /** Callback for when onColumnResize has ended. */\n  onColumnResizeEnd: (column: GridNode<T>) => void,\n  /** Getter for column width. */\n  getColumnWidth: (key: Key) => number,\n  /** Getter for column min width. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Getter for column max widths. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of column currently being resized. */\n  currentlyResizingColumn: Key | null\n}\n\nexport interface TableColumnResizeStateProps {\n  /** Callback to determine what the default width of a column should be. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** The default table width. */\n  tableWidth?: number\n}\n\ninterface ColumnState<T> {\n  columns: GridNode<T>[]\n}\n\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps, state: ColumnState<T>): TableColumnResizeState<T> {\n  const {getDefaultWidth, tableWidth: defaultTableWidth = null} = props;\n  const {columns} = state;\n  const columnsRef = useRef<GridNode<T>[]>([]);\n  const tableWidth = useRef<number>(defaultTableWidth);\n  const isResizing = useRef<boolean>(null);\n  const startResizeContentWidth = useRef<number>();\n\n  const [columnWidths, setColumnWidths] = useState<Map<Key, number>>(new Map(columns.map(col => [col.key, 0])));\n  const columnWidthsRef = useRef<Map<Key, number>>(columnWidths);\n  const affectedColumnWidthsRef = useRef<AffectedColumnWidths>([]);\n  const [resizedColumns, setResizedColumns] = useState<Set<Key>>(new Set());\n  const resizedColumnsRef = useRef<Set<Key>>(resizedColumns);\n\n  const [currentlyResizingColumn, setCurrentlyResizingColumn] = useState<Key>(null);\n\n  function setColumnWidthsForRef(newWidths: Map<Key, number>) {\n    columnWidthsRef.current = newWidths;\n    // new map so that change detection is triggered\n    setColumnWidths(newWidths);\n  }\n  /*\n    returns the resolved column width in this order:\n    previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n  let getResolvedColumnWidth = useCallback((column: GridNode<T>): (number | string) => {\n    let columnProps = column.props as ColumnProps<T>;\n    return resizedColumns?.has(column.key) ? columnWidthsRef.current.get(column.key) : columnProps.width ?? columnProps.defaultWidth ?? getDefaultWidth?.(column.props) ?? '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n\n  let getStaticAndDynamicColumns = useCallback((columns: GridNode<T>[]) : { staticColumns: GridNode<T>[], dynamicColumns: GridNode<T>[] } => columns.reduce((acc, column) => {\n    let width = getResolvedColumnWidth(column);\n    return isStatic(width) ? {...acc, staticColumns: [...acc.staticColumns, column]} : {...acc, dynamicColumns: [...acc.dynamicColumns, column]};\n  }, {staticColumns: [], dynamicColumns: []}), [getResolvedColumnWidth]);\n\n  let buildColumnWidths = useCallback((affectedColumns: GridNode<T>[], availableSpace: number): Map<Key, number> => {\n    const widths = new Map<Key, number>();\n    let remainingSpace = availableSpace;\n\n    const {staticColumns, dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    staticColumns.forEach(column => {\n      let width = getResolvedColumnWidth(column);\n      let w = parseStaticWidth(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n\n    // dynamic columns\n    if (dynamicColumns.length > 0) {\n      const newColumnWidths = getDynamicColumnWidths(dynamicColumns, remainingSpace, tableWidth.current);\n      for (let column of newColumnWidths) {\n        widths.set(column.key, column.calculatedWidth);\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n\n\n  const prevColKeys = columnsRef.current.map(col => col.key);\n  const colKeys = columns.map(col => col.key);\n  // if the columns change, need to rebuild widths.\n  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {\n    columnsRef.current = columns;\n    const widths = buildColumnWidths(columns, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width: number) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n      if (!isResizing.current) {\n        const widths = buildColumnWidths(columns, width);\n        setColumnWidthsForRef(widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column: GridNode<T>) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = getContentWidth(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column: GridNode<T>, width: number) {\n    let widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function onColumnResizeEnd(column: GridNode<T>) {\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    props.onColumnResizeEnd && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    affectedColumnWidthsRef.current = [];\n\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column: GridNode<T>, newWidth: number) : AffectedColumnWidths {\n    let boundedWidth =  Math.max(\n      getMinWidth(column.props.minWidth, tableWidth.current),\n      Math.min(Math.floor(newWidth), getMaxWidth(column.props.maxWidth, tableWidth.current)));\n\n    // copy the columnWidths map and set the new width for the column being resized\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    widths.set(column.key, boundedWidth);\n\n    // keep track of all columns that have been sized\n    resizedColumnsRef.current.add(column.key);\n    setResizedColumns(resizedColumnsRef.current);\n\n    // get the columns affected by resize and remaining space\n    const resizeIndex = columnsRef.current.findIndex(col => col.key === column.key);\n    let affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n\n    // we only care about the columns that CAN be resized, we ignore static columns.\n    let {dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    // available space for affected columns\n    let availableSpace = columnsRef.current.reduce((acc, column, index) => {\n      if (index <= resizeIndex || isStatic(getResolvedColumnWidth(column))) {\n        return acc - widths.get(column.key);\n      }\n      return acc;\n    }, tableWidth.current);\n\n    // merge the unaffected column widths and the recalculated column widths\n    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map<Key, number>([...widths, ...recalculatedColumnWidths]);\n\n    setColumnWidthsForRef(widths);\n\n    /*\n     when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n     so we need to add it to the list of affected columns\n    */\n    let allAffectedColumns = ([[column.key, boundedWidth], ...recalculatedColumnWidths] as [Key, number][]).map(([key, width]) => ({key, width}));\n    return allAffectedColumns;\n  }\n\n  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n  let getColumnWidth = useCallback((key: Key): number => columnWidthsRef.current.get(key) ?? 0, [columnWidthsRef.current]);\n\n  let getColumnMinWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMinWidth(columns[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns]);\n\n  let getColumnMaxWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMaxWidth(columns[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns]);\n\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth,\n    onColumnResize,\n    onColumnResizeStart,\n    onColumnResizeEnd,\n    getColumnWidth,\n    getColumnMinWidth,\n    getColumnMaxWidth,\n    currentlyResizingColumn\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo, useState} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}