{"ast":null,"code":"function DistribucionNormalResultado(media, N, desvio, confianza) {\n  const S = desvio;\n  let Z = 0;\n  let indexArray = 0;\n  let Zarray = [1.645, 1.695, 1.751, 1.812, 1.881, 1.960, 2.054, 2.170, 2.326, 2.576];\n  let confianzas = [0.95, 0.9550000000000001, 0.96, 0.9650000000000001, 0.97, 0.975, 0.98, 0.985, 0.99, 0.995];\n\n  if (confianza !== undefined) {\n    Z = 1 - (1 - confianza / 100) / 2;\n    confianzas.forEach(function (element, index) {\n      if (element == Z) {\n        indexArray = index;\n      }\n    });\n  }\n\n  const resultado = `${media - Zarray[indexArray] * (S / Math.sqrt(N))} <= μ <= ${media + Zarray[indexArray] * (S / Math.sqrt(N))}`;\n  return resultado;\n}\n\n_c = DistribucionNormalResultado;\n\nfunction DistribucionNormalFormula(media, N) {\n  return `${media} - Z σ/√${N}  <= μ <=  ${media} + Z σ/√${N}`;\n}\n\n_c2 = DistribucionNormalFormula;\nexport { DistribucionNormalResultado, DistribucionNormalFormula };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DistribucionNormalResultado\");\n$RefreshReg$(_c2, \"DistribucionNormalFormula\");","map":{"version":3,"names":["DistribucionNormalResultado","media","N","desvio","confianza","S","Z","indexArray","Zarray","confianzas","undefined","forEach","element","index","resultado","Math","sqrt","DistribucionNormalFormula"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/src/componentes/IntervaloDeConfianza/distribucionNormal.js"],"sourcesContent":["function DistribucionNormalResultado(media,N,desvio,confianza){\n    const S = desvio\n    let Z = 0\n    let indexArray = 0\n    let Zarray = [1.645,1.695,1.751,1.812,1.881,1.960,2.054,2.170,2.326,2.576]\n    let confianzas = [0.95,0.9550000000000001,0.96,0.9650000000000001,0.97,0.975,0.98,0.985,0.99,0.995]\n    if(confianza !== undefined){\n        Z = 1 - (1 - confianza/100)/2\n        confianzas.forEach(function (element, index) { \n            if(element == Z){\n                indexArray = index\n            }\n       })\n    }\n    const resultado = `${media - Zarray[indexArray] * (S/Math.sqrt(N))} <= μ <= ${media + Zarray[indexArray] * (S/Math.sqrt(N))}`;\n    return resultado\n}\nfunction DistribucionNormalFormula(media,N){\n    return `${media} - Z σ/√${N}  <= μ <=  ${media} + Z σ/√${N}`\n}\nexport {DistribucionNormalResultado,DistribucionNormalFormula}"],"mappings":"AAAA,SAASA,2BAAT,CAAqCC,KAArC,EAA2CC,CAA3C,EAA6CC,MAA7C,EAAoDC,SAApD,EAA8D;EAC1D,MAAMC,CAAC,GAAGF,MAAV;EACA,IAAIG,CAAC,GAAG,CAAR;EACA,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,MAAM,GAAG,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,EAA2C,KAA3C,EAAiD,KAAjD,EAAuD,KAAvD,CAAb;EACA,IAAIC,UAAU,GAAG,CAAC,IAAD,EAAM,kBAAN,EAAyB,IAAzB,EAA8B,kBAA9B,EAAiD,IAAjD,EAAsD,KAAtD,EAA4D,IAA5D,EAAiE,KAAjE,EAAuE,IAAvE,EAA4E,KAA5E,CAAjB;;EACA,IAAGL,SAAS,KAAKM,SAAjB,EAA2B;IACvBJ,CAAC,GAAG,IAAI,CAAC,IAAIF,SAAS,GAAC,GAAf,IAAoB,CAA5B;IACAK,UAAU,CAACE,OAAX,CAAmB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;MACzC,IAAGD,OAAO,IAAIN,CAAd,EAAgB;QACZC,UAAU,GAAGM,KAAb;MACH;IACL,CAJA;EAKH;;EACD,MAAMC,SAAS,GAAI,GAAEb,KAAK,GAAGO,MAAM,CAACD,UAAD,CAAN,IAAsBF,CAAC,GAACU,IAAI,CAACC,IAAL,CAAUd,CAAV,CAAxB,CAAsC,YAAWD,KAAK,GAAGO,MAAM,CAACD,UAAD,CAAN,IAAsBF,CAAC,GAACU,IAAI,CAACC,IAAL,CAAUd,CAAV,CAAxB,CAAsC,EAA5H;EACA,OAAOY,SAAP;AACH;;KAhBQd,2B;;AAiBT,SAASiB,yBAAT,CAAmChB,KAAnC,EAAyCC,CAAzC,EAA2C;EACvC,OAAQ,GAAED,KAAM,WAAUC,CAAE,cAAaD,KAAM,WAAUC,CAAE,EAA3D;AACH;;MAFQe,yB;AAGT,SAAQjB,2BAAR,EAAoCiB,yBAApC"},"metadata":{},"sourceType":"module"}