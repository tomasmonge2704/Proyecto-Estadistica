{"ast":null,"code":"import _slicedToArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useControlledState as $fQ2SF$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $fQ2SF$useMemo, useState as $fQ2SF$useState } from \"react\";\nvar $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);\nvar $a54cdc5c1942b639$var$i = 0;\n\nfunction $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  var name = $fQ2SF$useMemo(function () {\n    return props.name || \"radio-group-\".concat($a54cdc5c1942b639$var$instance, \"-\").concat(++$a54cdc5c1942b639$var$i);\n  }, [props.name]);\n\n  var _$fQ2SF$useControlled = $fQ2SF$useControlledState(props.value, props.defaultValue, props.onChange),\n      _$fQ2SF$useControlled2 = _slicedToArray(_$fQ2SF$useControlled, 2),\n      selectedValue = _$fQ2SF$useControlled2[0],\n      setSelected = _$fQ2SF$useControlled2[1];\n\n  var _$fQ2SF$useState = $fQ2SF$useState(null),\n      _$fQ2SF$useState2 = _slicedToArray(_$fQ2SF$useState, 2),\n      lastFocusedValue = _$fQ2SF$useState2[0],\n      setLastFocusedValue = _$fQ2SF$useState2[1];\n\n  var setSelectedValue = function setSelectedValue(value) {\n    if (!props.isReadOnly && !props.isDisabled) setSelected(value);\n  };\n\n  return {\n    name: name,\n    selectedValue: selectedValue,\n    setSelectedValue: setSelectedValue,\n    lastFocusedValue: lastFocusedValue,\n    setLastFocusedValue: setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n\nexport { $a54cdc5c1942b639$export$bca9d026f8e704eb as useRadioGroupState };","map":{"version":3,"mappings":";;;AA2CA,IAAIA,8BAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAAf;AACA,IAAIC,uBAAC,GAAG,CAAR;;SAMgBC,0CAAmBC,OAA0C;EAC3E;EACA,IAAIC,IAAI,GAAGC,cAAO;IAAA,OAAOF,KAAK,CAACC,IAAN,0BAA6BP,8BAA7B,cAAuC,EAAII,uBAA3C,CAAP;EAAA,GAAuD,CAACE,KAAK,CAACC,IAAP,CAAvD,CAAlB;;EACA,4BAAmCE,yBAAkB,CAACH,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACK,YAApB,EAAkCL,KAAK,CAACM,QAAxC,CAArD;EAAA;EAAA,IAAKC,aAAL;EAAA,IAAoBC,WAApB;;EACA,uBAA8CC,eAAQ,CAAC,IAAD,CAAtD;EAAA;EAAA,IAAKC,gBAAL;EAAA,IAAuBC,mBAAvB;;EAEA,IAAIC,gBAAgB,YAAhBA,gBAAgB,CAAIR,KAAJ,EAAc;IAChC,IAAE,CAAGJ,KAAK,CAACa,UAAT,IAAmB,CAAKb,KAAK,CAACc,UAAhC,EACEN,WAAW,CAACJ,KAAD,CAAX;EAEH,CAJD;;EAMA,OAAO;UACLH,IADK;mBAELM,aAFK;sBAGLK,gBAHK;sBAILF,gBAJK;yBAKLC,mBALK;IAMLG,UAAU,EAAEd,KAAK,CAACc,UAAN,IAAoB,KAN3B;IAOLD,UAAU,EAAEb,KAAK,CAACa,UAAN,IAAoB;EAP3B,CAAP;AASD","names":["$a54cdc5c1942b639$var$instance","Math","round","random","$a54cdc5c1942b639$var$i","$a54cdc5c1942b639$export$bca9d026f8e704eb","props","name","$fQ2SF$useMemo","$fQ2SF$useControlledState","value","defaultValue","onChange","selectedValue","setSelected","$fQ2SF$useState","lastFocusedValue","setLastFocusedValue","setSelectedValue","isReadOnly","isDisabled"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/radio/dist/packages/@react-stately/radio/src/useRadioGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n"]},"metadata":{},"sourceType":"module"}