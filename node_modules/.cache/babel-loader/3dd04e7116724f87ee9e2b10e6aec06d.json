{"ast":null,"code":"import _slicedToArray from \"/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\n\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _$b3nuO$useControlled = $b3nuO$useControlledState(props.value, props.defaultValue || [], props.onChange),\n      _$b3nuO$useControlled2 = _slicedToArray(_$b3nuO$useControlled, 2),\n      selectedValues = _$b3nuO$useControlled2[0],\n      _setValue = _$b3nuO$useControlled2[1];\n\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) _setValue(selectedValues.concat(value));\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));else _setValue(selectedValues.concat(value));\n    }\n  };\n  return state;\n}\n\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"mappings":";;;SA6CgBA,4CAA0E;EAAA,IAApDC,KAAoD,uEAAxB,EAAwB;;EACxF,4BAAiCC,yBAAkB,CAACD,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,YAAN,IAAsB,EAApC,EAAwCH,KAAK,CAACI,QAA9C,CAAnD;EAAA;EAAA,IAAKC,cAAL;EAAA,IAAqBC,SAArB;;EAEA,IAAMC,KAAK,GAAuB;IAChCL,KAAK,EAAEG,cADyB;IAEhCC,QAFgC,oBAEvBJ,KAFuB,EAEhB;MACd,IAAIF,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;;MAGFH,SAAQ,CAACJ,KAAD,CAAR;IACD,CAR+B;IAShCO,UAAU,EAAET,KAAK,CAACS,UAAN,IAAoB,KATA;IAUhCD,UAAU,EAAER,KAAK,CAACQ,UAAN,IAAoB,KAVA;IAWhCE,UAXgC,sBAWrBR,KAXqB,EAWd;MAChB,OAAOG,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAP;IACD,CAb+B;IAchCU,QAdgC,oBAcvBV,KAduB,EAchB;MACd,IAAIF,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAE,CAAGJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAL,EACEI,SAAQ,CAACD,cAAc,CAACQ,MAAf,CAAsBX,KAAtB,CAAD,CAAR;IAEH,CArB+B;IAsBhCY,WAtBgC,uBAsBpBZ,KAtBoB,EAsBb;MACjB,IAAIF,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAIJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAJ,EACEI,SAAQ,CAACD,cAAc,CAACU,MAAf,CAAqB,UAACC,aAAD;QAAA,OAAkBA,aAAa,KAAKd,KAApC;MAAA,CAArB,CAAD,CAAR;IAEH,CA7B+B;IA8BhCe,WA9BgC,uBA8BpBf,KA9BoB,EA8Bb;MACjB,IAAIF,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAIJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAJ,EACEI,SAAQ,CAACD,cAAc,CAACU,MAAf,CAAqB,UAACC,aAAD;QAAA,OAAkBA,aAAa,KAAKd,KAApC;MAAA,CAArB,CAAD,CAAR,CADF,KAGEI,SAAQ,CAACD,cAAc,CAACQ,MAAf,CAAsBX,KAAtB,CAAD,CAAR;IAEH;EAvC+B,CAAlC;EA0CA,OAAOK,KAAP;AACD","names":["$587d3ad58be6d31f$export$daff6da51032a415","props","$b3nuO$useControlledState","value","defaultValue","onChange","selectedValues","setValue","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/node_modules/@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}