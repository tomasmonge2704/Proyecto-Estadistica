{"ast":null,"code":"function DistribucionNormalResultado(media, N, desvio, confianza) {\n  const S = desvio;\n  let Z = 0;\n  let indexArray = 0;\n  let Zarray = [1.645, 1.695, 1.751, 1.812, 1.881, 1.960, 2.054, 2.170, 2.326, 2.576];\n  let confianzas = [0.95, 0.9550000000000001, 0.96, 0.9650000000000001, 0.97, 0.975, 0.98, 0.985, 0.99, 0.995];\n  if (confianza !== undefined) {\n    Z = 1 - (1 - confianza / 100) / 2;\n    confianzas.forEach(function (element, index) {\n      if (element == Z) {\n        indexArray = index;\n      }\n    });\n  }\n  const resultado = `${media - Zarray[indexArray] * (S / Math.sqrt(N))} <= μ <= ${media + Zarray[indexArray] * (S / Math.sqrt(N))}`;\n  return resultado;\n}\n_c = DistribucionNormalResultado;\nfunction DistribucionNormalFormula(media, N) {\n  return `${media} - Z σ/√${N}  <= μ <=  ${media} + Z σ/√${N}`;\n}\n_c2 = DistribucionNormalFormula;\nexport { DistribucionNormalResultado, DistribucionNormalFormula };\nvar _c, _c2;\n$RefreshReg$(_c, \"DistribucionNormalResultado\");\n$RefreshReg$(_c2, \"DistribucionNormalFormula\");","map":{"version":3,"names":["DistribucionNormalResultado","media","N","desvio","confianza","S","Z","indexArray","Zarray","confianzas","undefined","forEach","element","index","resultado","Math","sqrt","DistribucionNormalFormula"],"sources":["/Users/tomasmonge/Desktop/proyecto Estadistica/src/componentes/IntervaloDeConfianza/distribucionNormal.js"],"sourcesContent":["function DistribucionNormalResultado(media,N,desvio,confianza){\n    const S = desvio\n    let Z = 0\n    let indexArray = 0\n    let Zarray = [1.645,1.695,1.751,1.812,1.881,1.960,2.054,2.170,2.326,2.576]\n    let confianzas = [0.95,0.9550000000000001,0.96,0.9650000000000001,0.97,0.975,0.98,0.985,0.99,0.995]\n    if(confianza !== undefined){\n        Z = 1 - (1 - confianza/100)/2\n        confianzas.forEach(function (element, index) { \n            if(element == Z){\n                indexArray = index\n            }\n       })\n    }\n    const resultado = `${media - Zarray[indexArray] * (S/Math.sqrt(N))} <= μ <= ${media + Zarray[indexArray] * (S/Math.sqrt(N))}`;\n    return resultado\n}\nfunction DistribucionNormalFormula(media,N){\n    return `${media} - Z σ/√${N}  <= μ <=  ${media} + Z σ/√${N}`\n}\nexport {DistribucionNormalResultado,DistribucionNormalFormula}"],"mappings":"AAAA,SAASA,2BAA2B,CAACC,KAAK,EAACC,CAAC,EAACC,MAAM,EAACC,SAAS,EAAC;EAC1D,MAAMC,CAAC,GAAGF,MAAM;EAChB,IAAIG,CAAC,GAAG,CAAC;EACT,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,MAAM,GAAG,CAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,EAAC,KAAK,CAAC;EAC1E,IAAIC,UAAU,GAAG,CAAC,IAAI,EAAC,kBAAkB,EAAC,IAAI,EAAC,kBAAkB,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,CAAC;EACnG,IAAGL,SAAS,KAAKM,SAAS,EAAC;IACvBJ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGF,SAAS,GAAC,GAAG,IAAE,CAAC;IAC7BK,UAAU,CAACE,OAAO,CAAC,UAAUC,OAAO,EAAEC,KAAK,EAAE;MACzC,IAAGD,OAAO,IAAIN,CAAC,EAAC;QACZC,UAAU,GAAGM,KAAK;MACtB;IACL,CAAC,CAAC;EACL;EACA,MAAMC,SAAS,GAAI,GAAEb,KAAK,GAAGO,MAAM,CAACD,UAAU,CAAC,IAAIF,CAAC,GAACU,IAAI,CAACC,IAAI,CAACd,CAAC,CAAC,CAAE,YAAWD,KAAK,GAAGO,MAAM,CAACD,UAAU,CAAC,IAAIF,CAAC,GAACU,IAAI,CAACC,IAAI,CAACd,CAAC,CAAC,CAAE,EAAC;EAC7H,OAAOY,SAAS;AACpB;AAAC,KAhBQd,2BAA2B;AAiBpC,SAASiB,yBAAyB,CAAChB,KAAK,EAACC,CAAC,EAAC;EACvC,OAAQ,GAAED,KAAM,WAAUC,CAAE,cAAaD,KAAM,WAAUC,CAAE,EAAC;AAChE;AAAC,MAFQe,yBAAyB;AAGlC,SAAQjB,2BAA2B,EAACiB,yBAAyB;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}